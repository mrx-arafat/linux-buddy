export const chapter33 = {
  id: '33',
  icon: 'üé∏',
  title: 'NEOVIM',
  description: 'Advanced text editing with Neovim',
  slug: 'neovim',
  content: {
    overview: 'Welcome to NEOVIM - the hyperextensible Vim-based text editor that turns coding into an art form! üé∏ If you\'ve ever wanted to edit text at the speed of thought, navigate code like a ninja, and customize your editor to perfection, Neovim is your weapon of choice. Neovim takes the legendary Vim editor and supercharges it with modern features, Lua scripting, and an ecosystem of plugins that make it the ultimate developer tool. We\'re going to transform you from someone who struggles with basic text editing to a Neovim virtuoso who can manipulate code with surgical precision! üöÄ',
    sections: [
      {
        title: '1. Neovim Fundamentals - The Modern Vim üéØ',
        content: 'Neovim fundamentals introduce you to the most powerful text editor ever created. Built on Vim\'s foundation but modernized for today\'s developers, Neovim combines modal editing, extensibility, and performance into the ultimate coding experience.',
        codeExample: `# === NEOVIM FUNDAMENTALS ===
echo "üéØ Neovim Fundamentals - The Modern Vim"

# === WHAT IS NEOVIM? ===
echo "üé∏ WHAT IS NEOVIM?"
echo "Neovim is a hyperextensible Vim-based text editor:"
echo "‚úÖ Fork of Vim with modern architecture"
echo "‚úÖ Built-in LSP (Language Server Protocol)"
echo "‚úÖ Lua scripting for configuration"
echo "‚úÖ Asynchronous plugin architecture"
echo "‚úÖ Better defaults than Vim"
echo "‚úÖ Active development and community"

# === WHY NEOVIM? ===
echo "üåü WHY CHOOSE NEOVIM?"
echo ""
echo "Speed and Efficiency:"
echo "‚Ä¢ Modal editing (normal, insert, visual modes)"
echo "‚Ä¢ Keyboard-driven workflow"
echo "‚Ä¢ No mouse dependency"
echo "‚Ä¢ Lightning-fast text manipulation"
echo ""
echo "Customization:"
echo "‚Ä¢ Lua configuration (faster than Vimscript)"
echo "‚Ä¢ Extensive plugin ecosystem"
echo "‚Ä¢ Personalized workflows"
echo "‚Ä¢ Unlimited extensibility"
echo ""
echo "Modern Features:"
echo "‚Ä¢ Built-in LSP support"
echo "‚Ä¢ Tree-sitter syntax highlighting"
echo "‚Ä¢ Floating windows"
echo "‚Ä¢ Better terminal integration"

# === INSTALLATION ===
echo "üì¶ NEOVIM INSTALLATION:"
echo ""
echo "# Ubuntu/Debian"
echo "sudo apt update"
echo "sudo apt install neovim"
echo ""
echo "# macOS"
echo "brew install neovim"
echo ""
echo "# Arch Linux"
echo "sudo pacman -S neovim"
echo ""
echo "# From source (latest)"
echo "git clone https://github.com/neovim/neovim"
echo "cd neovim"
echo "make CMAKE_BUILD_TYPE=RelWithDebInfo"
echo "sudo make install"
echo ""
echo "# Verify installation"
echo "nvim --version"

# === BASIC CONCEPTS ===
echo "üß† BASIC NEOVIM CONCEPTS:"
echo ""
echo "Modal Editing:"
echo "‚Ä¢ Normal mode: Navigate and manipulate text"
echo "‚Ä¢ Insert mode: Type text like a regular editor"
echo "‚Ä¢ Visual mode: Select text"
echo "‚Ä¢ Command mode: Execute commands"
echo ""
echo "Buffers, Windows, and Tabs:"
echo "‚Ä¢ Buffer: File loaded in memory"
echo "‚Ä¢ Window: View of a buffer"
echo "‚Ä¢ Tab: Collection of windows"
echo ""
echo "Configuration:"
echo "‚Ä¢ ~/.config/nvim/init.lua (main config)"
echo "‚Ä¢ ~/.config/nvim/lua/ (Lua modules)"
echo "‚Ä¢ Plugin management with package managers"

# === FIRST STEPS ===
echo "üë∂ FIRST STEPS WITH NEOVIM:"
echo ""
echo "# Start Neovim"
echo "nvim"
echo ""
echo "# Open a file"
echo "nvim myfile.txt"
echo ""
echo "# Basic navigation (Normal mode)"
echo "h, j, k, l     # Left, down, up, right"
echo "w, b           # Word forward, backward"
echo "0, \\$           # Beginning, end of line"
echo "gg, G          # Top, bottom of file"
echo ""
echo "# Enter Insert mode"
echo "i              # Insert before cursor"
echo "a              # Insert after cursor"
echo "o              # New line below"
echo "O              # New line above"
echo ""
echo "# Exit Insert mode"
echo "<Esc>          # Return to Normal mode"
echo ""
echo "# Save and quit"
echo ":w             # Save file"
echo ":q             # Quit"
echo ":wq            # Save and quit"
echo ":q!            # Quit without saving"

# === ESSENTIAL COMMANDS ===
echo "‚ö° ESSENTIAL NEOVIM COMMANDS:"
echo ""
echo "Text Manipulation:"
echo "x              # Delete character"
echo "dd             # Delete line"
echo "yy             # Copy line"
echo "p              # Paste"
echo "u              # Undo"
echo "Ctrl+r         # Redo"
echo ""
echo "Search and Replace:"
echo "/pattern       # Search forward"
echo "?pattern       # Search backward"
echo "n              # Next match"
echo "N              # Previous match"
echo ":%s/old/new/g  # Replace all"
echo ""
echo "File Operations:"
echo ":e filename    # Edit file"
echo ":w filename    # Save as"
echo ":r filename    # Read file into buffer"
echo ":!command      # Execute shell command"

# === CONFIGURATION BASICS ===
echo "‚öôÔ∏è CONFIGURATION BASICS:"
echo ""
echo "# Create config directory"
echo "mkdir -p ~/.config/nvim"
echo ""
echo "# Basic init.lua"
echo "-- ~/.config/nvim/init.lua"
echo "-- Basic settings"
echo "vim.opt.number = true          -- Show line numbers"
echo "vim.opt.relativenumber = true  -- Relative line numbers"
echo "vim.opt.tabstop = 4            -- Tab width"
echo "vim.opt.shiftwidth = 4         -- Indent width"
echo "vim.opt.expandtab = true       -- Use spaces instead of tabs"
echo "vim.opt.smartindent = true     -- Smart indentation"
echo "vim.opt.wrap = false           -- No line wrapping"
echo "vim.opt.ignorecase = true      -- Case insensitive search"
echo "vim.opt.smartcase = true       -- Case sensitive if uppercase"
echo "vim.opt.hlsearch = false       -- No search highlighting"
echo "vim.opt.incsearch = true       -- Incremental search"

# === MODES EXPLAINED ===
echo "üé≠ NEOVIM MODES EXPLAINED:"
echo ""
echo "Normal Mode (Default):"
echo "‚Ä¢ Navigation and text manipulation"
echo "‚Ä¢ Most powerful mode"
echo "‚Ä¢ Press <Esc> to enter"
echo ""
echo "Insert Mode:"
echo "‚Ä¢ Type text like regular editor"
echo "‚Ä¢ Press i, a, o, O to enter"
echo "‚Ä¢ Press <Esc> to exit"
echo ""
echo "Visual Mode:"
echo "‚Ä¢ Select text"
echo "‚Ä¢ Press v (character), V (line), Ctrl+v (block)"
echo "‚Ä¢ Perform operations on selection"
echo ""
echo "Command Mode:"
echo "‚Ä¢ Execute commands"
echo "‚Ä¢ Press : to enter"
echo "‚Ä¢ Type command and press Enter"

echo ""
echo "üé∏ NEOVIM FUNDAMENTALS COMPLETE!"
echo "You now understand the power of modal editing!"
echo "Next: Let's master movement and editing! ‚ö°"`
      },
      {
        title: '2. Movement & Editing - Vim Motions Mastery ‚ö°',
        content: 'Mastering Vim motions is the key to editing at the speed of thought. Neovim\'s movement commands allow you to navigate and manipulate text with incredible precision and efficiency.',
        codeExample: `# === MOVEMENT & EDITING ===
echo "‚ö° Movement & Editing - Vim Motions Mastery"

# === BASIC MOVEMENT ===
echo "üèÉ BASIC MOVEMENT:"
echo ""
echo "Character Movement:"
echo "h              # Move left"
echo "j              # Move down"
echo "k              # Move up"
echo "l              # Move right"
echo ""
echo "Word Movement:"
echo "w              # Next word start"
echo "W              # Next WORD start (whitespace separated)"
echo "e              # Next word end"
echo "E              # Next WORD end"
echo "b              # Previous word start"
echo "B              # Previous WORD start"
echo ""
echo "Line Movement:"
echo "0              # Beginning of line"
echo "^              # First non-blank character"
echo "\\$              # End of line"
echo "g_             # Last non-blank character"

# === ADVANCED MOVEMENT ===
echo "üöÄ ADVANCED MOVEMENT:"
echo ""
echo "File Navigation:"
echo "gg             # Go to first line"
echo "G              # Go to last line"
echo "5G or :5       # Go to line 5"
echo "Ctrl+u         # Half page up"
echo "Ctrl+d         # Half page down"
echo "Ctrl+b         # Full page up"
echo "Ctrl+f         # Full page down"
echo ""
echo "Search Movement:"
echo "f{char}        # Find character forward"
echo "F{char}        # Find character backward"
echo "t{char}        # Till character forward"
echo "T{char}        # Till character backward"
echo ";              # Repeat last f/F/t/T"
echo ",              # Repeat last f/F/t/T backward"
echo ""
echo "Bracket/Parentheses:"
echo "%              # Jump to matching bracket"
echo "[(             # Previous ("
echo "])             # Next )"
echo "[{             # Previous {"
echo "]}             # Next }"

# === TEXT OBJECTS ===
echo "üéØ TEXT OBJECTS:"
echo ""
echo "Text objects define 'what' to operate on:"
echo ""
echo "Word Objects:"
echo "iw             # Inner word"
echo "aw             # A word (includes spaces)"
echo ""
echo "Sentence/Paragraph:"
echo "is             # Inner sentence"
echo "as             # A sentence"
echo "ip             # Inner paragraph"
echo "ap             # A paragraph"
echo ""
echo "Quotes/Brackets:"
echo "i\"             # Inside double quotes"
echo "a\"             # Around double quotes"
echo "i'             # Inside single quotes"
echo "i)             # Inside parentheses"
echo "a)             # Around parentheses"
echo "i]             # Inside square brackets"
echo "i}             # Inside curly braces"
echo ""
echo "Examples:"
echo "diw            # Delete inner word"
echo "ci\"            # Change inside quotes"
echo "ya)            # Yank around parentheses"
echo "vi}            # Visual select inside braces"

# === OPERATORS ===
echo "üîß OPERATORS:"
echo ""
echo "Operators perform actions on text objects:"
echo ""
echo "d              # Delete"
echo "c              # Change (delete and enter insert)"
echo "y              # Yank (copy)"
echo "v              # Visual select"
echo "=              # Auto-indent"
echo "g~             # Toggle case"
echo "gu             # Lowercase"
echo "gU             # Uppercase"
echo ""
echo "Operator + Motion Examples:"
echo "dw             # Delete word"
echo "d\\$             # Delete to end of line"
echo "c3w            # Change 3 words"
echo "y5j            # Yank 5 lines down"
echo "=ap            # Auto-indent paragraph"

# === EDITING COMMANDS ===
echo "‚úèÔ∏è EDITING COMMANDS:"
echo ""
echo "Insert Mode Entry:"
echo "i              # Insert before cursor"
echo "I              # Insert at beginning of line"
echo "a              # Append after cursor"
echo "A              # Append at end of line"
echo "o              # Open line below"
echo "O              # Open line above"
echo "s              # Substitute character"
echo "S              # Substitute line"
echo ""
echo "Delete Commands:"
echo "x              # Delete character under cursor"
echo "X              # Delete character before cursor"
echo "dd             # Delete line"
echo "D              # Delete to end of line"
echo "dG             # Delete to end of file"
echo "dgg            # Delete to beginning of file"
echo ""
echo "Copy/Paste:"
echo "yy             # Yank line"
echo "Y              # Yank to end of line"
echo "p              # Paste after cursor"
echo "P              # Paste before cursor"
echo "\"+y            # Copy to system clipboard"
echo "\"+p            # Paste from system clipboard"

# === VISUAL MODE ===
echo "üëÅÔ∏è VISUAL MODE:"
echo ""
echo "Visual Mode Types:"
echo "v              # Character-wise visual"
echo "V              # Line-wise visual"
echo "Ctrl+v         # Block-wise visual"
echo ""
echo "Visual Mode Operations:"
echo "d              # Delete selection"
echo "c              # Change selection"
echo "y              # Yank selection"
echo "=              # Auto-indent selection"
echo "u              # Lowercase selection"
echo "U              # Uppercase selection"
echo "~              # Toggle case"
echo ""
echo "Block Visual Examples:"
echo "Ctrl+v         # Start block visual"
echo "5j             # Select 5 lines down"
echo "I              # Insert at beginning of all lines"
echo "A              # Append at end of all lines"

# === SEARCH AND REPLACE ===
echo "üîç SEARCH AND REPLACE:"
echo ""
echo "Basic Search:"
echo "/pattern       # Search forward"
echo "?pattern       # Search backward"
echo "n              # Next match"
echo "N              # Previous match"
echo "*              # Search word under cursor forward"
echo "#              # Search word under cursor backward"
echo ""
echo "Search Options:"
echo "/pattern\\c     # Case insensitive"
echo "/pattern\\C     # Case sensitive"
echo "/\\<word\\>      # Exact word match"
echo ""
echo "Replace Commands:"
echo ":s/old/new/    # Replace first on line"
echo ":s/old/new/g   # Replace all on line"
echo ":%s/old/new/g  # Replace all in file"
echo ":%s/old/new/gc # Replace all with confirmation"
echo ":5,10s/old/new/g # Replace in lines 5-10"

# === MACROS ===
echo "üé¨ MACROS:"
echo ""
echo "Record and replay sequences of commands:"
echo ""
echo "q[register]    # Start recording macro"
echo "q              # Stop recording"
echo "@[register]    # Play macro"
echo "@@             # Repeat last macro"
echo "5@a            # Play macro 'a' 5 times"
echo ""
echo "Example:"
echo "qa             # Start recording macro 'a'"
echo "I// <Esc>      # Add comment at beginning"
echo "j              # Move to next line"
echo "q              # Stop recording"
echo "5@a            # Apply to next 5 lines"

# === MARKS AND JUMPS ===
echo "üìç MARKS AND JUMPS:"
echo ""
echo "Setting Marks:"
echo "m[letter]      # Set mark"
echo "ma             # Set mark 'a'"
echo ""
echo "Jumping to Marks:"
echo "'[mark]        # Jump to mark line"
echo "'[mark]        # Jump to exact mark position"
echo "'a             # Jump to line with mark 'a'"
echo "'a             # Jump to exact position of mark 'a'"
echo ""
echo "Special Marks:"
echo "''             # Previous position"
echo "'.             # Last change"
echo "'^             # Last insert"
echo "''             # Previous jump"

echo ""
echo "‚ö° MOVEMENT & EDITING MASTERY COMPLETE!"
echo "You can now navigate and edit text like a ninja!"
echo "Next: Let's configure and customize! ‚öôÔ∏è"`
      },
      {
        title: '3. Configuration & Plugins - Customizing Your Editor ‚öôÔ∏è',
        content: 'Neovim\'s true power lies in its configurability. With Lua scripting and a rich plugin ecosystem, you can transform Neovim into the perfect editor for your workflow.',
        codeExample: `# === CONFIGURATION & PLUGINS ===
echo "‚öôÔ∏è Configuration & Plugins - Customizing Your Editor"

# === LUA CONFIGURATION ===
echo "üåô LUA CONFIGURATION:"
echo ""
echo "Neovim uses Lua for configuration (faster than Vimscript)"
echo ""
echo "# Basic init.lua structure"
echo "-- ~/.config/nvim/init.lua"
echo ""
echo "-- General settings"
echo "vim.opt.number = true"
echo "vim.opt.relativenumber = true"
echo "vim.opt.tabstop = 4"
echo "vim.opt.shiftwidth = 4"
echo "vim.opt.expandtab = true"
echo "vim.opt.smartindent = true"
echo "vim.opt.wrap = false"
echo "vim.opt.swapfile = false"
echo "vim.opt.backup = false"
echo "vim.opt.undodir = os.getenv('HOME') .. '/.vim/undodir'"
echo "vim.opt.undofile = true"
echo "vim.opt.hlsearch = false"
echo "vim.opt.incsearch = true"
echo "vim.opt.termguicolors = true"
echo "vim.opt.scrolloff = 8"
echo "vim.opt.signcolumn = 'yes'"
echo "vim.opt.updatetime = 50"

# === KEY MAPPINGS ===
echo "üîë KEY MAPPINGS:"
echo ""
echo "-- Key mappings in init.lua"
echo "vim.g.mapleader = ' '  -- Set leader key to space"
echo ""
echo "-- Normal mode mappings"
echo "vim.keymap.set('n', '<leader>pv', vim.cmd.Ex)"
echo "vim.keymap.set('n', '<C-d>', '<C-d>zz')"
echo "vim.keymap.set('n', '<C-u>', '<C-u>zz')"
echo "vim.keymap.set('n', 'n', 'nzzzv')"
echo "vim.keymap.set('n', 'N', 'Nzzzv')"
echo ""
echo "-- Visual mode mappings"
echo "vim.keymap.set('v', 'J', \":m '>+1<CR>gv=gv\")"
echo "vim.keymap.set('v', 'K', \":m '<-2<CR>gv=gv\")"
echo ""
echo "-- Insert mode mappings"
echo "vim.keymap.set('i', '<C-c>', '<Esc>')"

# === PLUGIN MANAGEMENT ===
echo "üì¶ PLUGIN MANAGEMENT:"
echo ""
echo "Popular plugin managers:"
echo "‚Ä¢ Packer.nvim (Lua-based)"
echo "‚Ä¢ lazy.nvim (Modern, fast)"
echo "‚Ä¢ vim-plug (Simple, reliable)"
echo ""
echo "# Install lazy.nvim"
echo "git clone --filter=blob:none https://github.com/folke/lazy.nvim.git --branch=stable ~/.local/share/nvim/lazy/lazy.nvim"
echo ""
echo "# Basic lazy.nvim setup"
echo "-- ~/.config/nvim/lua/plugins.lua"
echo "return {"
echo "  'nvim-lua/plenary.nvim',"
echo "  {"
echo "    'nvim-telescope/telescope.nvim',"
echo "    dependencies = { 'nvim-lua/plenary.nvim' },"
echo "    config = function()"
echo "      require('telescope').setup({})"
echo "    end"
echo "  },"
echo "}"

# === ESSENTIAL PLUGINS ===
echo "üîå ESSENTIAL PLUGINS:"
echo ""
echo "File Management:"
echo "‚Ä¢ telescope.nvim - Fuzzy finder"
echo "‚Ä¢ nvim-tree.lua - File explorer"
echo "‚Ä¢ harpoon - Quick file navigation"
echo ""
echo "LSP and Completion:"
echo "‚Ä¢ nvim-lspconfig - LSP configurations"
echo "‚Ä¢ mason.nvim - LSP installer"
echo "‚Ä¢ nvim-cmp - Autocompletion"
echo "‚Ä¢ LuaSnip - Snippet engine"
echo ""
echo "Syntax and Appearance:"
echo "‚Ä¢ nvim-treesitter - Better syntax highlighting"
echo "‚Ä¢ lualine.nvim - Status line"
echo "‚Ä¢ tokyonight.nvim - Color scheme"
echo ""
echo "Git Integration:"
echo "‚Ä¢ fugitive.vim - Git commands"
echo "‚Ä¢ gitsigns.nvim - Git signs in gutter"
echo ""
echo "Productivity:"
echo "‚Ä¢ which-key.nvim - Key binding help"
echo "‚Ä¢ comment.nvim - Easy commenting"
echo "‚Ä¢ autopairs.nvim - Auto close brackets"

# === LSP CONFIGURATION ===
echo "üß† LSP CONFIGURATION:"
echo ""
echo "Language Server Protocol provides:"
echo "‚Ä¢ Code completion"
echo "‚Ä¢ Error diagnostics"
echo "‚Ä¢ Go to definition"
echo "‚Ä¢ Hover documentation"
echo "‚Ä¢ Code formatting"
echo ""
echo "# Basic LSP setup"
echo "-- ~/.config/nvim/lua/lsp.lua"
echo "local lsp = require('lspconfig')"
echo ""
echo "-- TypeScript/JavaScript"
echo "lsp.tsserver.setup({})"
echo ""
echo "-- Python"
echo "lsp.pyright.setup({})"
echo ""
echo "-- Lua"
echo "lsp.lua_ls.setup({"
echo "  settings = {"
echo "    Lua = {"
echo "      runtime = { version = 'LuaJIT' },"
echo "      diagnostics = { globals = {'vim'} },"
echo "      workspace = {"
echo "        library = vim.api.nvim_get_runtime_file('', true),"
echo "      },"
echo "    },"
echo "  },"
echo "})"

# === TREESITTER SETUP ===
echo "üå≥ TREESITTER SETUP:"
echo ""
echo "Tree-sitter provides better syntax highlighting:"
echo ""
echo "-- ~/.config/nvim/lua/treesitter.lua"
echo "require('nvim-treesitter.configs').setup({"
echo "  ensure_installed = {"
echo "    'lua', 'vim', 'javascript', 'typescript',"
echo "    'python', 'rust', 'go', 'html', 'css'"
echo "  },"
echo "  highlight = { enable = true },"
echo "  indent = { enable = true },"
echo "  incremental_selection = {"
echo "    enable = true,"
echo "    keymaps = {"
echo "      init_selection = 'gnn',"
echo "      node_incremental = 'grn',"
echo "      scope_incremental = 'grc',"
echo "      node_decremental = 'grm',"
echo "    },"
echo "  },"
echo "})"

# === TELESCOPE CONFIGURATION ===
echo "üî≠ TELESCOPE CONFIGURATION:"
echo ""
echo "Telescope is a fuzzy finder for everything:"
echo ""
echo "-- Telescope keymaps"
echo "local builtin = require('telescope.builtin')"
echo "vim.keymap.set('n', '<leader>ff', builtin.find_files, {})"
echo "vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})"
echo "vim.keymap.set('n', '<leader>fb', builtin.buffers, {})"
echo "vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})"
echo "vim.keymap.set('n', '<leader>fs', builtin.grep_string, {})"
echo ""
echo "-- Telescope configuration"
echo "require('telescope').setup({"
echo "  defaults = {"
echo "    file_ignore_patterns = { 'node_modules', '.git' },"
echo "    layout_config = {"
echo "      horizontal = { preview_width = 0.6 },"
echo "    },"
echo "  },"
echo "})"

# === MODULAR CONFIGURATION ===
echo "üìÅ MODULAR CONFIGURATION:"
echo ""
echo "Organize config into modules:"
echo ""
echo "~/.config/nvim/"
echo "‚îú‚îÄ‚îÄ init.lua"
echo "‚îú‚îÄ‚îÄ lua/"
echo "‚îÇ   ‚îú‚îÄ‚îÄ config/"
echo "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ options.lua"
echo "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ keymaps.lua"
echo "‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ autocmds.lua"
echo "‚îÇ   ‚îú‚îÄ‚îÄ plugins/"
echo "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ init.lua"
echo "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lsp.lua"
echo "‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ treesitter.lua"
echo "‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ telescope.lua"
echo "‚îÇ   ‚îî‚îÄ‚îÄ utils.lua"
echo ""
echo "# Load modules in init.lua"
echo "require('config.options')"
echo "require('config.keymaps')"
echo "require('config.autocmds')"
echo "require('plugins')"

echo ""
echo "‚öôÔ∏è CONFIGURATION & PLUGINS COMPLETE!"
echo "Your Neovim is now a powerful IDE!"
echo "Next: Advanced workflows and tips! üöÄ"`
      },
      {
        title: '4. Advanced Workflows - Neovim Mastery üöÄ',
        content: 'Advanced Neovim workflows combine all the features into powerful development patterns. Master these techniques to achieve true editing efficiency and become a Neovim virtuoso.',
        codeExample: `# === ADVANCED WORKFLOWS ===
echo "üöÄ Advanced Workflows - Neovim Mastery"

# === BUFFER MANAGEMENT ===
echo "üìÑ BUFFER MANAGEMENT:"
echo ""
echo "Buffers are files loaded in memory:"
echo ""
echo ":ls or :buffers    # List all buffers"
echo ":b [number]        # Switch to buffer number"
echo ":b [name]          # Switch to buffer by name"
echo ":bn                # Next buffer"
echo ":bp                # Previous buffer"
echo ":bd                # Delete current buffer"
echo ":bd [number]       # Delete specific buffer"
echo ":bw                # Wipe buffer (force delete)"
echo ""
echo "Buffer navigation keymaps:"
echo "vim.keymap.set('n', '<leader>bn', ':bnext<CR>')"
echo "vim.keymap.set('n', '<leader>bp', ':bprev<CR>')"
echo "vim.keymap.set('n', '<leader>bd', ':bdelete<CR>')"

# === WINDOW MANAGEMENT ===
echo "ü™ü WINDOW MANAGEMENT:"
echo ""
echo "Split Windows:"
echo ":split or :sp      # Horizontal split"
echo ":vsplit or :vsp    # Vertical split"
echo ":new               # New horizontal split"
echo ":vnew              # New vertical split"
echo ""
echo "Window Navigation:"
echo "Ctrl+w h           # Move to left window"
echo "Ctrl+w j           # Move to bottom window"
echo "Ctrl+w k           # Move to top window"
echo "Ctrl+w l           # Move to right window"
echo "Ctrl+w w           # Cycle through windows"
echo ""
echo "Window Resizing:"
echo "Ctrl+w +           # Increase height"
echo "Ctrl+w -           # Decrease height"
echo "Ctrl+w >           # Increase width"
echo "Ctrl+w <           # Decrease width"
echo "Ctrl+w =           # Equal size windows"
echo ""
echo "Window Management Keymaps:"
echo "vim.keymap.set('n', '<leader>sv', '<C-w>v')"
echo "vim.keymap.set('n', '<leader>sh', '<C-w>s')"
echo "vim.keymap.set('n', '<leader>se', '<C-w>=')"
echo "vim.keymap.set('n', '<leader>sx', ':close<CR>')"

# === TAB MANAGEMENT ===
echo "üìë TAB MANAGEMENT:"
echo ""
echo "Tab Operations:"
echo ":tabnew            # New tab"
echo ":tabclose          # Close tab"
echo ":tabonly           # Close all other tabs"
echo "gt                 # Next tab"
echo "gT                 # Previous tab"
echo "[number]gt         # Go to tab number"
echo ""
echo "Tab keymaps:"
echo "vim.keymap.set('n', '<leader>tn', ':tabnew<CR>')"
echo "vim.keymap.set('n', '<leader>tc', ':tabclose<CR>')"
echo "vim.keymap.set('n', '<leader>to', ':tabonly<CR>')"

# === QUICKFIX AND LOCATION LISTS ===
echo "üìã QUICKFIX AND LOCATION LISTS:"
echo ""
echo "Quickfix List (global):"
echo ":copen             # Open quickfix window"
echo ":cclose            # Close quickfix window"
echo ":cnext             # Next quickfix item"
echo ":cprev             # Previous quickfix item"
echo ":cfirst            # First quickfix item"
echo ":clast             # Last quickfix item"
echo ""
echo "Location List (window-local):"
echo ":lopen             # Open location list"
echo ":lclose            # Close location list"
echo ":lnext             # Next location item"
echo ":lprev             # Previous location item"
echo ""
echo "Populate quickfix with grep:"
echo ":grep pattern **/*.js"
echo ":vimgrep /pattern/g **/*.js"

# === SESSIONS ===
echo "üíæ SESSIONS:"
echo ""
echo "Save and restore your workspace:"
echo ""
echo ":mksession session.vim    # Save session"
echo ":source session.vim       # Load session"
echo "nvim -S session.vim       # Start with session"
echo ""
echo "Auto-session plugin:"
echo "-- Auto save/restore sessions"
echo "require('auto-session').setup({"
echo "  log_level = 'error',"
echo "  auto_session_suppress_dirs = { '~/', '~/Downloads' },"
echo "})"

# === DEBUGGING WORKFLOW ===
echo "üêõ DEBUGGING WORKFLOW:"
echo ""
echo "Built-in debugging with nvim-dap:"
echo ""
echo "-- DAP (Debug Adapter Protocol) setup"
echo "local dap = require('dap')"
echo ""
echo "-- Keymaps for debugging"
echo "vim.keymap.set('n', '<F5>', dap.continue)"
echo "vim.keymap.set('n', '<F10>', dap.step_over)"
echo "vim.keymap.set('n', '<F11>', dap.step_into)"
echo "vim.keymap.set('n', '<F12>', dap.step_out)"
echo "vim.keymap.set('n', '<leader>b', dap.toggle_breakpoint)"
echo ""
echo "-- DAP UI for better debugging experience"
echo "require('dapui').setup()"

# === GIT WORKFLOW ===
echo "üåø GIT WORKFLOW:"
echo ""
echo "Fugitive.vim commands:"
echo ":Git or :G         # Git status"
echo ":Git add %         # Stage current file"
echo ":Git commit        # Commit"
echo ":Git push          # Push"
echo ":Git pull          # Pull"
echo ":Gdiffsplit        # Diff current file"
echo ":Gblame            # Git blame"
echo ""
echo "Gitsigns for inline git info:"
echo "require('gitsigns').setup({"
echo "  signs = {"
echo "    add = { text = '+' },"
echo "    change = { text = '~' },"
echo "    delete = { text = '_' },"
echo "  },"
echo "  on_attach = function(bufnr)"
echo "    local gs = package.loaded.gitsigns"
echo "    vim.keymap.set('n', '<leader>hs', gs.stage_hunk)"
echo "    vim.keymap.set('n', '<leader>hr', gs.reset_hunk)"
echo "    vim.keymap.set('n', '<leader>hp', gs.preview_hunk)"
echo "  end"
echo "})"

# === TERMINAL INTEGRATION ===
echo "üíª TERMINAL INTEGRATION:"
echo ""
echo "Built-in terminal:"
echo ":terminal          # Open terminal"
echo ":split | terminal  # Terminal in split"
echo "Ctrl+\\\\ Ctrl+n      # Exit terminal mode"
echo ""
echo "Terminal keymaps:"
echo "vim.keymap.set('n', '<leader>t', ':terminal<CR>')"
echo "vim.keymap.set('t', '<Esc>', '<C-\\\\><C-n>')"
echo ""
echo "Toggleterm plugin for better terminal:"
echo "require('toggleterm').setup({"
echo "  size = 20,"
echo "  open_mapping = [[<c-\\>]],"
echo "  direction = 'float',"
echo "})"

# === PRODUCTIVITY TIPS ===
echo "üí° PRODUCTIVITY TIPS:"
echo ""
echo "1. Use relative line numbers for efficient jumping"
echo "2. Master text objects (iw, ap, i\", etc.)"
echo "3. Create custom keymaps for frequent operations"
echo "4. Use marks for quick navigation"
echo "5. Learn to use the quickfix list"
echo "6. Use macros for repetitive tasks"
echo "7. Configure LSP for your languages"
echo "8. Use snippets for boilerplate code"
echo "9. Set up project-specific configurations"
echo "10. Use sessions to save workspace state"

# === PERFORMANCE OPTIMIZATION ===
echo "‚ö° PERFORMANCE OPTIMIZATION:"
echo ""
echo "-- Optimize startup time"
echo "vim.opt.lazyredraw = true"
echo "vim.opt.ttyfast = true"
echo ""
echo "-- Lazy load plugins"
echo "-- Use lazy.nvim for plugin management"
echo ""
echo "-- Disable unused providers"
echo "vim.g.loaded_python3_provider = 0"
echo "vim.g.loaded_ruby_provider = 0"
echo "vim.g.loaded_perl_provider = 0"
echo "vim.g.loaded_node_provider = 0"

# === NEOVIM MASTERY CHECKLIST ===
echo "üéØ NEOVIM MASTERY CHECKLIST:"
echo "============================"
echo "‚ñ° Master modal editing"
echo "‚ñ° Learn efficient movement commands"
echo "‚ñ° Understand text objects and operators"
echo "‚ñ° Configure with Lua"
echo "‚ñ° Set up essential plugins"
echo "‚ñ° Configure LSP for your languages"
echo "‚ñ° Master buffer/window/tab management"
echo "‚ñ° Use quickfix and location lists"
echo "‚ñ° Set up debugging workflow"
echo "‚ñ° Integrate with Git"
echo "‚ñ° Create custom keymaps"
echo "‚ñ° Use sessions for project management"

echo ""
echo "üéâ NEOVIM MASTERY COMPLETE!"
echo "=========================="
echo "You now understand:"
echo "‚úÖ Modal editing and Vim motions"
echo "‚úÖ Advanced movement and text manipulation"
echo "‚úÖ Lua configuration and plugin management"
echo "‚úÖ LSP integration and modern IDE features"
echo "‚úÖ Advanced workflows and productivity tips"
echo "‚úÖ Debugging and Git integration"
echo "‚úÖ Performance optimization"
echo ""
echo "üé∏ You are now a NEOVIM VIRTUOSO!"
echo "Edit code at the speed of thought! ‚ö°"
echo ""
echo "Remember: Neovim mastery is a journey, not a destination."
echo "Keep practicing, keep customizing, and keep improving!"
echo "Your fingers will thank you for learning the most efficient"
echo "text editor ever created! üöÄ"`
      }
    ]
  }
}