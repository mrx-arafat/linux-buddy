export const chapter31 = {
  id: '31',
  icon: 'üî™',
  title: 'ANSIBLE',
  description: 'Automation with Ansible',
  slug: 'ansible',
  content: {
    overview: 'Welcome to ANSIBLE - the automation tool that turns you into an infrastructure wizard! üî™ If you\'ve ever dreamed of managing hundreds of servers with a single command, or configuring entire data centers while sipping coffee, Ansible is your magic wand. Ansible is agentless, idempotent, and uses simple YAML syntax that reads like English. We\'re going to transform you from someone who manually configures servers one by one to an automation master who can orchestrate entire infrastructures with elegant playbooks! üöÄ',
    sections: [
      {
        title: '1. Ansible Fundamentals - Infrastructure as Code üèóÔ∏è',
        content: 'Ansible fundamentals are the foundation of modern infrastructure automation. Ansible uses SSH to connect to remote systems and execute tasks, making it agentless and secure. Understanding Ansible\'s architecture and core concepts is essential for automating your infrastructure.',
        codeExample: `# === ANSIBLE FUNDAMENTALS ===
echo "üèóÔ∏è Ansible Fundamentals - Infrastructure as Code"

# === WHAT IS ANSIBLE? ===
echo "üî™ WHAT IS ANSIBLE?"
echo "Ansible is an open-source automation tool that:"
echo "‚úÖ Automates configuration management"
echo "‚úÖ Orchestrates application deployment"
echo "‚úÖ Manages infrastructure provisioning"
echo "‚úÖ Handles continuous delivery"
echo "‚úÖ Uses simple YAML syntax"
echo "‚úÖ Requires no agents on target systems"

# === ANSIBLE ARCHITECTURE ===
echo "üèóÔ∏è ANSIBLE ARCHITECTURE:"
echo ""
echo "Control Node (where Ansible runs):"
echo "‚Ä¢ Ansible engine"
echo "‚Ä¢ Playbooks and roles"
echo "‚Ä¢ Inventory files"
echo "‚Ä¢ Configuration files"
echo ""
echo "Managed Nodes (target systems):"
echo "‚Ä¢ No Ansible agent required"
echo "‚Ä¢ Only needs SSH and Python"
echo "‚Ä¢ Can be Linux, Windows, network devices"

# === KEY CONCEPTS ===
echo "üîë KEY ANSIBLE CONCEPTS:"
echo ""
echo "üìã Inventory:"
echo "‚Ä¢ List of managed nodes"
echo "‚Ä¢ Groups and variables"
echo "‚Ä¢ Static or dynamic"
echo ""
echo "üìñ Playbook:"
echo "‚Ä¢ YAML file with automation tasks"
echo "‚Ä¢ Describes desired state"
echo "‚Ä¢ Reusable and version controlled"
echo ""
echo "üé≠ Role:"
echo "‚Ä¢ Reusable collection of tasks"
echo "‚Ä¢ Organized directory structure"
echo "‚Ä¢ Shareable across projects"
echo ""
echo "üì¶ Module:"
echo "‚Ä¢ Units of work in Ansible"
echo "‚Ä¢ Built-in or custom"
echo "‚Ä¢ Idempotent operations"
echo ""
echo "üéØ Task:"
echo "‚Ä¢ Single unit of action"
echo "‚Ä¢ Uses modules to do work"
echo "‚Ä¢ Can have conditions and loops"

# === ANSIBLE INSTALLATION ===
echo "üì¶ ANSIBLE INSTALLATION:"
echo ""
echo "# Ubuntu/Debian:"
echo "sudo apt update"
echo "sudo apt install ansible"
echo ""
echo "# CentOS/RHEL:"
echo "sudo yum install epel-release"
echo "sudo yum install ansible"
echo ""
echo "# Using pip:"
echo "pip3 install ansible"
echo ""
echo "# Verify installation:"
echo "ansible --version"

# === BASIC ANSIBLE COMMANDS ===
echo "‚ö° BASIC ANSIBLE COMMANDS:"
echo ""
echo "# Check connectivity to all hosts"
echo "ansible all -m ping"
echo ""
echo "# Run command on all hosts"
echo "ansible all -a 'uptime'"
echo ""
echo "# Run command on specific group"
echo "ansible webservers -a 'df -h'"
echo ""
echo "# Use specific module"
echo "ansible all -m setup"
echo ""
echo "# Run with sudo"
echo "ansible all -a 'systemctl status nginx' --become"

# === INVENTORY BASICS ===
echo "üìã INVENTORY BASICS:"
echo ""
echo "# Simple inventory file (/etc/ansible/hosts)"
echo "[webservers]"
echo "web1.example.com"
echo "web2.example.com"
echo ""
echo "[databases]"
echo "db1.example.com"
echo "db2.example.com"
echo ""
echo "[all:vars]"
echo "ansible_user=admin"
echo "ansible_ssh_private_key_file=~/.ssh/id_rsa"

# === FIRST PLAYBOOK ===
echo "üìñ YOUR FIRST PLAYBOOK:"
echo ""
echo "# hello-world.yml"
echo "---"
echo "- name: Hello World Playbook"
echo "  hosts: all"
echo "  tasks:"
echo "    - name: Print hello message"
echo "      debug:"
echo "        msg: 'Hello from Ansible!'"
echo ""
echo "    - name: Show system info"
echo "      command: uname -a"
echo "      register: system_info"
echo ""
echo "    - name: Display system info"
echo "      debug:"
echo "        var: system_info.stdout"
echo ""
echo "# Run the playbook:"
echo "ansible-playbook hello-world.yml"

# === ANSIBLE BENEFITS ===
echo "üåü ANSIBLE BENEFITS:"
echo ""
echo "For System Administrators:"
echo "‚úÖ Consistent server configurations"
echo "‚úÖ Reduced manual errors"
echo "‚úÖ Faster deployment times"
echo "‚úÖ Easy rollback capabilities"
echo "‚úÖ Compliance and auditing"
echo ""
echo "For DevOps Teams:"
echo "‚úÖ Infrastructure as Code"
echo "‚úÖ Version controlled automation"
echo "‚úÖ Repeatable deployments"
echo "‚úÖ Cross-platform support"
echo "‚úÖ Integration with CI/CD"

echo ""
echo "üî™ ANSIBLE FUNDAMENTALS COMPLETE!"
echo "You now understand the power of infrastructure automation!"
echo "Next: Let's write some playbooks! üìñ"`
      },
      {
        title: '2. Playbooks & Tasks - Automation Recipes üìñ',
        content: 'Ansible playbooks are the heart of automation - they define what you want to happen on your managed systems. Playbooks use YAML syntax and are composed of plays, which contain tasks that call Ansible modules.',
        codeExample: `# === PLAYBOOKS & TASKS ===
echo "üìñ Playbooks & Tasks - Automation Recipes"

# === PLAYBOOK STRUCTURE ===
echo "üìã PLAYBOOK STRUCTURE:"
echo ""
echo "A playbook consists of:"
echo "‚Ä¢ Header (name, hosts, variables)"
echo "‚Ä¢ Tasks (what to do)"
echo "‚Ä¢ Handlers (triggered by changes)"
echo "‚Ä¢ Variables (data for tasks)"
echo "‚Ä¢ Conditionals (when to run)"

# === BASIC PLAYBOOK EXAMPLE ===
echo "üìñ BASIC PLAYBOOK EXAMPLE:"
echo ""
echo "# webserver-setup.yml"
echo "---"
echo "- name: Configure Web Server"
echo "  hosts: webservers"
echo "  become: yes"
echo "  vars:"
echo "    http_port: 80"
echo "    max_clients: 200"
echo ""
echo "  tasks:"
echo "    - name: Install Apache"
echo "      package:"
echo "        name: apache2"
echo "        state: present"
echo ""
echo "    - name: Start Apache service"
echo "      service:"
echo "        name: apache2"
echo "        state: started"
echo "        enabled: yes"
echo ""
echo "    - name: Copy index.html"
echo "      copy:"
echo "        content: '<h1>Hello from Ansible!</h1>'"
echo "        dest: /var/www/html/index.html"
echo "      notify: restart apache"
echo ""
echo "  handlers:"
echo "    - name: restart apache"
echo "      service:"
echo "        name: apache2"
echo "        state: restarted"

# === COMMON MODULES ===
echo "üß© COMMON ANSIBLE MODULES:"
echo ""
echo "System modules:"
echo "‚Ä¢ package: Install/remove packages"
echo "‚Ä¢ service: Manage services"
echo "‚Ä¢ user: Manage user accounts"
echo "‚Ä¢ group: Manage groups"
echo "‚Ä¢ cron: Manage cron jobs"
echo ""
echo "File modules:"
echo "‚Ä¢ copy: Copy files to remote systems"
echo "‚Ä¢ template: Process Jinja2 templates"
echo "‚Ä¢ file: Set file attributes"
echo "‚Ä¢ lineinfile: Modify lines in files"
echo "‚Ä¢ replace: Replace text in files"
echo ""
echo "Command modules:"
echo "‚Ä¢ command: Run commands"
echo "‚Ä¢ shell: Run shell commands"
echo "‚Ä¢ script: Run local scripts on remote"

# === VARIABLES AND FACTS ===
echo "üìä VARIABLES AND FACTS:"
echo ""
echo "# Using variables in playbooks"
echo "---"
echo "- name: Variable Example"
echo "  hosts: all"
echo "  vars:"
echo "    app_name: myapp"
echo "    app_version: 1.0"
echo ""
echo "  tasks:"
echo "    - name: Install application"
echo "      package:"
echo "        name: '{{ app_name }}'"
echo "        state: present"
echo ""
echo "    - name: Show system facts"
echo "      debug:"
echo "        msg: 'OS: {{ ansible_distribution }} {{ ansible_distribution_version }}'"

# === CONDITIONALS AND LOOPS ===
echo "üîÑ CONDITIONALS AND LOOPS:"
echo ""
echo "# Conditional execution"
echo "- name: Install package on Ubuntu only"
echo "  package:"
echo "    name: apache2"
echo "    state: present"
echo "  when: ansible_distribution == 'Ubuntu'"
echo ""
echo "# Loop through items"
echo "- name: Install multiple packages"
echo "  package:"
echo "    name: '{{ item }}'"
echo "    state: present"
echo "  loop:"
echo "    - nginx"
echo "    - mysql-server"
echo "    - php-fpm"

# === HANDLERS ===
echo "üéØ HANDLERS:"
echo ""
echo "# Handlers are triggered by notify"
echo "tasks:"
echo "  - name: Update nginx config"
echo "    template:"
echo "      src: nginx.conf.j2"
echo "      dest: /etc/nginx/nginx.conf"
echo "    notify: restart nginx"
echo ""
echo "handlers:"
echo "  - name: restart nginx"
echo "    service:"
echo "      name: nginx"
echo "      state: restarted"

# === PLAYBOOK EXECUTION ===
echo "üöÄ PLAYBOOK EXECUTION:"
echo ""
echo "# Basic execution"
echo "ansible-playbook playbook.yml"
echo ""
echo "# Dry run (check mode)"
echo "ansible-playbook playbook.yml --check"
echo ""
echo "# Verbose output"
echo "ansible-playbook playbook.yml -v"
echo "ansible-playbook playbook.yml -vvv"
echo ""
echo "# Limit to specific hosts"
echo "ansible-playbook playbook.yml --limit webservers"
echo ""
echo "# Use specific inventory"
echo "ansible-playbook -i inventory.ini playbook.yml"

# === REAL-WORLD EXAMPLE ===
echo "üåç REAL-WORLD EXAMPLE - LAMP STACK:"
echo ""
echo "# lamp-stack.yml"
echo "---"
echo "- name: Deploy LAMP Stack"
echo "  hosts: webservers"
echo "  become: yes"
echo ""
echo "  tasks:"
echo "    - name: Update package cache"
echo "      apt:"
echo "        update_cache: yes"
echo ""
echo "    - name: Install LAMP packages"
echo "      package:"
echo "        name:"
echo "          - apache2"
echo "          - mysql-server"
echo "          - php"
echo "          - php-mysql"
echo "          - libapache2-mod-php"
echo "        state: present"
echo ""
echo "    - name: Start and enable services"
echo "      service:"
echo "        name: '{{ item }}'"
echo "        state: started"
echo "        enabled: yes"
echo "      loop:"
echo "        - apache2"
echo "        - mysql"
echo ""
echo "    - name: Create database"
echo "      mysql_db:"
echo "        name: webapp"
echo "        state: present"

echo ""
echo "üìñ PLAYBOOKS & TASKS MASTERY COMPLETE!"
echo "You can now automate complex infrastructure tasks!"
echo "Next: Let's organize with roles! üé≠"`
      },
      {
        title: '3. Roles & Organization - Reusable Automation üé≠',
        content: 'Ansible roles provide a way to organize playbooks and make them reusable. Roles follow a specific directory structure and allow you to break complex automation into manageable, shareable components.',
        codeExample: `# === ROLES & ORGANIZATION ===
echo "üé≠ Roles & Organization - Reusable Automation"

# === WHAT ARE ROLES? ===
echo "üé≠ WHAT ARE ANSIBLE ROLES?"
echo "Roles are a way to organize Ansible content:"
echo "‚úÖ Reusable automation components"
echo "‚úÖ Standardized directory structure"
echo "‚úÖ Shareable across projects"
echo "‚úÖ Version controlled independently"
echo "‚úÖ Easier to maintain and test"

# === ROLE DIRECTORY STRUCTURE ===
echo "üìÅ ROLE DIRECTORY STRUCTURE:"
echo ""
echo "roles/"
echo "  webserver/"
echo "    tasks/          # Main list of tasks"
echo "      main.yml"
echo "    handlers/       # Handlers triggered by tasks"
echo "      main.yml"
echo "    templates/      # Jinja2 templates"
echo "      nginx.conf.j2"
echo "    files/          # Static files to copy"
echo "      index.html"
echo "    vars/           # Role variables"
echo "      main.yml"
echo "    defaults/       # Default variables"
echo "      main.yml"
echo "    meta/           # Role metadata"
echo "      main.yml"

# === CREATING A ROLE ===
echo "üèóÔ∏è CREATING A ROLE:"
echo ""
echo "# Create role structure"
echo "ansible-galaxy init webserver"
echo ""
echo "# Or create manually"
echo "mkdir -p roles/webserver/{tasks,handlers,templates,files,vars,defaults,meta}"

# === ROLE EXAMPLE - NGINX ===
echo "üåê ROLE EXAMPLE - NGINX WEBSERVER:"
echo ""
echo "# roles/nginx/tasks/main.yml"
echo "---"
echo "- name: Install Nginx"
echo "  package:"
echo "    name: nginx"
echo "    state: present"
echo ""
echo "- name: Copy Nginx configuration"
echo "  template:"
echo "    src: nginx.conf.j2"
echo "    dest: /etc/nginx/nginx.conf"
echo "  notify: restart nginx"
echo ""
echo "- name: Start and enable Nginx"
echo "  service:"
echo "    name: nginx"
echo "    state: started"
echo "    enabled: yes"
echo ""
echo "# roles/nginx/handlers/main.yml"
echo "---"
echo "- name: restart nginx"
echo "  service:"
echo "    name: nginx"
echo "    state: restarted"
echo ""
echo "# roles/nginx/defaults/main.yml"
echo "---"
echo "nginx_port: 80"
echo "nginx_user: www-data"
echo "worker_processes: auto"

# === USING ROLES IN PLAYBOOKS ===
echo "üìñ USING ROLES IN PLAYBOOKS:"
echo ""
echo "# site.yml"
echo "---"
echo "- name: Configure web servers"
echo "  hosts: webservers"
echo "  become: yes"
echo "  roles:"
echo "    - nginx"
echo "    - php"
echo "    - mysql"
echo ""
echo "- name: Configure database servers"
echo "  hosts: databases"
echo "  become: yes"
echo "  roles:"
echo "    - mysql"
echo "    - backup"

# === ROLE DEPENDENCIES ===
echo "üîó ROLE DEPENDENCIES:"
echo ""
echo "# roles/webapp/meta/main.yml"
echo "---"
echo "dependencies:"
echo "  - role: nginx"
echo "    nginx_port: 8080"
echo "  - role: mysql"
echo "    mysql_root_password: secret"

# === ANSIBLE GALAXY ===
echo "üåå ANSIBLE GALAXY:"
echo ""
echo "# Search for roles"
echo "ansible-galaxy search nginx"
echo ""
echo "# Install role from Galaxy"
echo "ansible-galaxy install geerlingguy.nginx"
echo ""
echo "# Install from requirements file"
echo "# requirements.yml"
echo "---"
echo "- name: geerlingguy.nginx"
echo "- name: geerlingguy.mysql"
echo ""
echo "ansible-galaxy install -r requirements.yml"

# === BEST PRACTICES ===
echo "‚ú® ROLE BEST PRACTICES:"
echo ""
echo "1. Keep roles focused and single-purpose"
echo "2. Use meaningful variable names"
echo "3. Provide sensible defaults"
echo "4. Document your roles"
echo "5. Test roles independently"
echo "6. Version your roles"
echo "7. Use tags for selective execution"

echo ""
echo "üé≠ ROLES & ORGANIZATION COMPLETE!"
echo "You can now create reusable automation components!"
echo "Next: Advanced Ansible techniques! üöÄ"`
      },
      {
        title: '4. Advanced Ansible - Production Automation üöÄ',
        content: 'Advanced Ansible techniques enable you to build production-ready automation systems. This includes inventory management, vault for secrets, advanced playbook patterns, and integration with CI/CD pipelines.',
        codeExample: `# === ADVANCED ANSIBLE ===
echo "üöÄ Advanced Ansible - Production Automation"

# === DYNAMIC INVENTORY ===
echo "üîÑ DYNAMIC INVENTORY:"
echo ""
echo "# AWS EC2 dynamic inventory"
echo "# inventory_aws_ec2.yml"
echo "plugin: aws_ec2"
echo "regions:"
echo "  - us-east-1"
echo "  - us-west-2"
echo "keyed_groups:"
echo "  - key: tags"
echo "    prefix: tag"
echo "  - key: instance_type"
echo "    prefix: instance_type"
echo ""
echo "# Use dynamic inventory"
echo "ansible-playbook -i inventory_aws_ec2.yml playbook.yml"

# === ANSIBLE VAULT ===
echo "üîê ANSIBLE VAULT (SECRETS MANAGEMENT):"
echo ""
echo "# Create encrypted file"
echo "ansible-vault create secrets.yml"
echo ""
echo "# Edit encrypted file"
echo "ansible-vault edit secrets.yml"
echo ""
echo "# Encrypt existing file"
echo "ansible-vault encrypt vars.yml"
echo ""
echo "# Decrypt file"
echo "ansible-vault decrypt vars.yml"
echo ""
echo "# Run playbook with vault"
echo "ansible-playbook playbook.yml --ask-vault-pass"
echo "ansible-playbook playbook.yml --vault-password-file vault_pass.txt"

# === ADVANCED PLAYBOOK PATTERNS ===
echo "üéØ ADVANCED PLAYBOOK PATTERNS:"
echo ""
echo "# Rolling updates"
echo "---"
echo "- name: Rolling update web servers"
echo "  hosts: webservers"
echo "  serial: 2  # Update 2 servers at a time"
echo "  max_fail_percentage: 25"
echo ""
echo "  pre_tasks:"
echo "    - name: Remove from load balancer"
echo "      uri:"
echo "        url: 'http://lb.example.com/remove/{{ inventory_hostname }}'"
echo ""
echo "  tasks:"
echo "    - name: Update application"
echo "      git:"
echo "        repo: https://github.com/company/app.git"
echo "        dest: /opt/app"
echo "        version: '{{ app_version }}'"
echo ""
echo "  post_tasks:"
echo "    - name: Add back to load balancer"
echo "      uri:"
echo "        url: 'http://lb.example.com/add/{{ inventory_hostname }}'"

# === ERROR HANDLING ===
echo "üõ°Ô∏è ERROR HANDLING:"
echo ""
echo "# Ignore errors"
echo "- name: Command that might fail"
echo "  command: /bin/false"
echo "  ignore_errors: yes"
echo ""
echo "# Rescue blocks"
echo "- block:"
echo "    - name: Risky task"
echo "      command: risky_command"
echo "  rescue:"
echo "    - name: Handle failure"
echo "      debug:"
echo "        msg: 'Task failed, handling gracefully'"
echo "  always:"
echo "    - name: Always run this"
echo "      debug:"
echo "        msg: 'Cleanup task'"

# === TESTING ANSIBLE ===
echo "üß™ TESTING ANSIBLE:"
echo ""
echo "# Syntax check"
echo "ansible-playbook playbook.yml --syntax-check"
echo ""
echo "# Dry run"
echo "ansible-playbook playbook.yml --check"
echo ""
echo "# Molecule for role testing"
echo "pip install molecule[docker]"
echo "molecule init role my-role"
echo "molecule test"

# === CI/CD INTEGRATION ===
echo "üîÑ CI/CD INTEGRATION:"
echo ""
echo "# GitLab CI example"
echo "# .gitlab-ci.yml"
echo "stages:"
echo "  - test"
echo "  - deploy"
echo ""
echo "test_ansible:"
echo "  stage: test"
echo "  script:"
echo "    - ansible-playbook playbook.yml --syntax-check"
echo "    - ansible-playbook playbook.yml --check"
echo ""
echo "deploy_production:"
echo "  stage: deploy"
echo "  script:"
echo "    - ansible-playbook -i production playbook.yml"
echo "  only:"
echo "    - main"

# === PERFORMANCE OPTIMIZATION ===
echo "‚ö° PERFORMANCE OPTIMIZATION:"
echo ""
echo "# Ansible configuration (ansible.cfg)"
echo "[defaults]"
echo "host_key_checking = False"
echo "pipelining = True"
echo "forks = 20"
echo "gathering = smart"
echo "fact_caching = memory"
echo ""
echo "[ssh_connection]"
echo "ssh_args = -o ControlMaster=auto -o ControlPersist=60s"
echo "control_path = ~/.ansible/cp/%%h-%%p-%%r"

# === MONITORING AND LOGGING ===
echo "üìä MONITORING AND LOGGING:"
echo ""
echo "# Callback plugins for logging"
echo "# ansible.cfg"
echo "[defaults]"
echo "callback_whitelist = profile_tasks, timer"
echo ""
echo "# Custom logging"
echo "- name: Log deployment"
echo "  uri:"
echo "    url: 'http://monitoring.example.com/api/deployments'"
echo "    method: POST"
echo "    body_format: json"
echo "    body:"
echo "      host: '{{ inventory_hostname }}'"
echo "      timestamp: '{{ ansible_date_time.iso8601 }}'"
echo "      status: success"

# === PRODUCTION DEPLOYMENT EXAMPLE ===
echo "üè≠ PRODUCTION DEPLOYMENT EXAMPLE:"
echo ""
echo "# deploy.yml"
echo "---"
echo "- name: Deploy Application to Production"
echo "  hosts: production"
echo "  become: yes"
echo "  vars_files:"
echo "    - vault/secrets.yml"
echo ""
echo "  pre_tasks:"
echo "    - name: Create backup"
echo "      archive:"
echo "        path: /opt/app"
echo "        dest: '/backup/app-{{ ansible_date_time.epoch }}.tar.gz'"
echo ""
echo "  roles:"
echo "    - role: app-deploy"
echo "      app_version: '{{ deploy_version }}'"
echo ""
echo "  post_tasks:"
echo "    - name: Verify deployment"
echo "      uri:"
echo "        url: 'http://{{ inventory_hostname }}/health'"
echo "        status_code: 200"
echo ""
echo "    - name: Notify team"
echo "      mail:"
echo "        to: team@company.com"
echo "        subject: 'Deployment Complete'"
echo "        body: 'App version {{ deploy_version }} deployed successfully'"

# === ANSIBLE MASTERY CHECKLIST ===
echo "üéØ ANSIBLE MASTERY CHECKLIST:"
echo "================================"
echo "‚ñ° Understand Ansible architecture"
echo "‚ñ° Write effective playbooks"
echo "‚ñ° Create reusable roles"
echo "‚ñ° Manage secrets with Vault"
echo "‚ñ° Use dynamic inventory"
echo "‚ñ° Implement error handling"
echo "‚ñ° Test automation code"
echo "‚ñ° Integrate with CI/CD"
echo "‚ñ° Optimize for performance"
echo "‚ñ° Monitor and log deployments"

echo ""
echo "üéâ ANSIBLE MASTERY COMPLETE!"
echo "================================"
echo "You now understand:"
echo "‚úÖ Ansible fundamentals and architecture"
echo "‚úÖ Playbook and task creation"
echo "‚úÖ Role organization and reusability"
echo "‚úÖ Advanced automation patterns"
echo "‚úÖ Production deployment strategies"
echo "‚úÖ Security and secrets management"
echo "‚úÖ Testing and CI/CD integration"
echo ""
echo "üî™ You are now an ANSIBLE MASTER!"
echo "Automate infrastructure like a DevOps professional! üöÄ"
echo ""
echo "Remember: Automation is not about replacing humans,"
echo "it's about freeing them to do more valuable work!"
echo "Use your Ansible mastery to build reliable, scalable infrastructure! üí™"`
      }
    ]
  }
}